[
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "BaseCell",
    "methods": [],
    "props": {
      "row": {
        "defaultValue": null,
        "description": "",
        "name": "row",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridRowModel<T>"
        }
      },
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridColumnModel<T>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "isFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isFocused",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isSelected": {
        "defaultValue": null,
        "description": "",
        "name": "isSelected",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isEditable": {
        "defaultValue": null,
        "description": "",
        "name": "isEditable",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "",
        "name": "validationStatus",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellValidationState"
        }
      },
      "validationMessage": {
        "defaultValue": null,
        "description": "",
        "name": "validationMessage",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "validationType": {
        "defaultValue": null,
        "description": "",
        "name": "validationType",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellValidationType"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "ColumnGroup",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
          "name": "ColumnGroupProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
            "name": "ColumnGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
          "name": "ColumnGroupProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
            "name": "ColumnGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "pinned": {
        "defaultValue": null,
        "description": "",
        "name": "pinned",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
          "name": "ColumnGroupProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
            "name": "ColumnGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridColumnPin"
        }
      },
      "headerComponent": {
        "defaultValue": null,
        "description": "",
        "name": "headerComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
          "name": "ColumnGroupProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
            "name": "ColumnGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<ColumnGroupCellProps>"
        }
      },
      "headerValueComponent": {
        "defaultValue": null,
        "description": "",
        "name": "headerValueComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
          "name": "ColumnGroupProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
            "name": "ColumnGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<ColumnGroupCellValueProps>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "CellEditor",
    "methods": [],
    "props": {
      "columnId": {
        "defaultValue": null,
        "description": "",
        "name": "columnId",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/CellEditor.tsx",
          "name": "CellEditorProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/CellEditor.tsx",
            "name": "CellEditorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "CornerTag",
    "methods": [],
    "props": {
      "focusOnly": {
        "defaultValue": null,
        "description": "",
        "name": "focusOnly",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/CornerTag.tsx",
          "name": "CornerTagProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/CornerTag.tsx",
            "name": "CornerTagProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "GroupHeaderCell",
    "methods": [],
    "props": {
      "group": {
        "defaultValue": null,
        "description": "",
        "name": "group",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GroupHeaderCell.tsx",
          "name": "GroupHeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GroupHeaderCell.tsx",
            "name": "GroupHeaderCellProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridColumnGroupModel"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "GroupHeaderCellValue",
    "methods": [],
    "props": {
      "group": {
        "defaultValue": null,
        "description": "",
        "name": "group",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
          "name": "ColumnGroupCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/ColumnGroup.tsx",
            "name": "ColumnGroupCellValueProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridColumnGroupModel"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "HeaderCellSeparator",
    "methods": [],
    "props": {
      "separatorType": {
        "defaultValue": null,
        "description": "",
        "name": "separatorType",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/HeaderCell.tsx",
          "name": "HeaderCellSeparatorProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/HeaderCell.tsx",
            "name": "HeaderCellSeparatorProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ColumnSeparatorType"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "HeaderCell",
    "methods": [],
    "props": {
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridColumnModel<T>"
        }
      },
      "isFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isFocused",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "AutoSizeHeaderCell",
    "methods": [],
    "props": {
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridColumnModel<T>"
        }
      },
      "isFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isFocused",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "HeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "HeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "HeaderCellValue",
    "methods": [],
    "props": {
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridHeaderValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridHeaderValueProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridColumnModel<T>"
        }
      },
      "isFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isFocused",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridHeaderValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridHeaderValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "range",
    "methods": [],
    "props": {
      "0": {
        "defaultValue": null,
        "description": "",
        "name": "0",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "1": {
        "defaultValue": null,
        "description": "",
        "name": "1",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "2": {
        "defaultValue": null,
        "description": "",
        "name": "2",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "length": {
        "defaultValue": null,
        "description": "",
        "name": "length",
        "required": true,
        "type": {
          "name": "1 | 2 | 3"
        }
      },
      "toString": {
        "defaultValue": {},
        "description": "Returns a string representation of an array.",
        "name": "toString",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => string) | (() => string) | (() => string)"
        }
      },
      "toLocaleString": {
        "defaultValue": {},
        "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
        "name": "toLocaleString",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => string) | (() => string) | (() => string)"
        }
      },
      "pop": {
        "defaultValue": null,
        "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
        "name": "pop",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(() => number) | (() => number) | (() => number)"
        }
      },
      "push": {
        "defaultValue": null,
        "description": "Appends new elements to the end of an array, and returns the new length of the array.\n@param items New elements to add to the array.",
        "name": "push",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((...items: number[]) => number) | ((...items: number[]) => number) | ((...items: number[]) => number)"
        }
      },
      "concat": {
        "defaultValue": null,
        "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.\n@param items Additional arrays and/or items to add to the end of the array.\n@param items Additional arrays and/or items to add to the end of the array.",
        "name": "concat",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "{ (...items: ConcatArray<number>[]): number[]; (...items: (number | ConcatArray<number>)[]): number[]; } | { (...items: ConcatArray<number>[]): number[]; (...items: (number | ConcatArray<...>)[]): number[]; } | { ...; }"
        }
      },
      "join": {
        "defaultValue": null,
        "description": "Adds all the elements of an array into a string, separated by the specified separator string.\n@param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.",
        "name": "join",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((separator?: string) => string) | ((separator?: string) => string) | ((separator?: string) => string)"
        }
      },
      "reverse": {
        "defaultValue": null,
        "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
        "name": "reverse",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(() => number[]) | (() => number[]) | (() => number[])"
        }
      },
      "shift": {
        "defaultValue": null,
        "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
        "name": "shift",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(() => number) | (() => number) | (() => number)"
        }
      },
      "slice": {
        "defaultValue": null,
        "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.\n@param start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0.\n@param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array.",
        "name": "slice",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((start?: number, end?: number) => number[]) | ((start?: number, end?: number) => number[]) | ((start?: number, end?: number) => number[])"
        }
      },
      "sort": {
        "defaultValue": null,
        "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```",
        "name": "sort",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((compareFn?: (a: number, b: number) => number) => [number]) | ((compareFn?: (a: number, b: number) => number) => [number, number]) | ((compareFn?: (a: number, b: number) => number) => [...])"
        }
      },
      "splice": {
        "defaultValue": null,
        "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@returns An array containing the elements that were deleted.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.\n@returns An array containing the elements that were deleted.",
        "name": "splice",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "{ (start: number, deleteCount?: number): number[]; (start: number, deleteCount: number, ...items: number[]): number[]; } | { (start: number, deleteCount?: number): number[]; (start: number, deleteCount: number, ...items: number[]): number[]; } | { ...; }"
        }
      },
      "unshift": {
        "defaultValue": null,
        "description": "Inserts new elements at the start of an array, and returns the new length of the array.\n@param items Elements to insert at the start of the array.",
        "name": "unshift",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((...items: number[]) => number) | ((...items: number[]) => number) | ((...items: number[]) => number)"
        }
      },
      "indexOf": {
        "defaultValue": null,
        "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
        "name": "indexOf",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((searchElement: number, fromIndex?: number) => number) | ((searchElement: number, fromIndex?: number) => number) | ((searchElement: number, fromIndex?: number) => number)"
        }
      },
      "lastIndexOf": {
        "defaultValue": null,
        "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.",
        "name": "lastIndexOf",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((searchElement: number, fromIndex?: number) => number) | ((searchElement: number, fromIndex?: number) => number) | ((searchElement: number, fromIndex?: number) => number)"
        }
      },
      "every": {
        "defaultValue": null,
        "description": "Determines whether all the members of an array satisfy the specified test.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
        "name": "every",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "{ <S extends number>(predicate: (value: number, index: number, array: number[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): boolean; } | { ...; } | { ...; }"
        }
      },
      "some": {
        "defaultValue": null,
        "description": "Determines whether the specified callback function returns true for any element of an array.\n@param predicate A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
        "name": "some",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => boolean) | ((predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => boolean) | ((predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => boolean)"
        }
      },
      "forEach": {
        "defaultValue": null,
        "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
        "name": "forEach",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void) | ((callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void) | ((callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void)"
        }
      },
      "map": {
        "defaultValue": null,
        "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
        "name": "map",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(<U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => U[])"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Returns the elements of an array that meet the condition specified in a callback function.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.",
        "name": "filter",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "{ <S extends number>(predicate: (value: number, index: number, array: number[]) => value is S, thisArg?: any): S[]; (predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): number[]; } | { ...; } | { ...; }"
        }
      },
      "reduce": {
        "defaultValue": null,
        "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
        "name": "reduce",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "{ (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number): number; (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, ..."
        }
      },
      "reduceRight": {
        "defaultValue": null,
        "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
        "name": "reduceRight",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es5.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "{ (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number): number; (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, ..."
        }
      },
      "find": {
        "defaultValue": null,
        "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
        "name": "find",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "{ <S extends number>(predicate: (this: void, value: number, index: number, obj: number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: number[]) => unknown, thisArg?: any): number; } | { ...; } | { ...; }"
        }
      },
      "findIndex": {
        "defaultValue": null,
        "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
        "name": "findIndex",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((predicate: (value: number, index: number, obj: number[]) => unknown, thisArg?: any) => number) | ((predicate: (value: number, index: number, obj: number[]) => unknown, thisArg?: any) => number) | ((predicate: (value: number, index: number, obj: number[]) => unknown, thisArg?: any) => number)"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\nlength+end.",
        "name": "fill",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((value: number, start?: number, end?: number) => [number]) | ((value: number, start?: number, end?: number) => [number, number]) | ((value: number, start?: number, end?: number) => [number, number, number])"
        }
      },
      "copyWithin": {
        "defaultValue": null,
        "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\nlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
        "name": "copyWithin",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((target: number, start: number, end?: number) => [number]) | ((target: number, start: number, end?: number) => [number, number]) | ((target: number, start: number, end?: number) => [...])"
        }
      },
      "entries": {
        "defaultValue": null,
        "description": "Returns an iterable of key, value pairs for every entry in the array",
        "name": "entries",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(() => IterableIterator<[number, number]>) | (() => IterableIterator<[number, number]>) | (() => IterableIterator<[number, number]>)"
        }
      },
      "keys": {
        "defaultValue": null,
        "description": "Returns an iterable of keys in the array",
        "name": "keys",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(() => IterableIterator<number>) | (() => IterableIterator<number>) | (() => IterableIterator<number>)"
        }
      },
      "values": {
        "defaultValue": null,
        "description": "Returns an iterable of values in the array",
        "name": "values",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(() => IterableIterator<number>) | (() => IterableIterator<number>) | (() => IterableIterator<number>)"
        }
      },
      "includes": {
        "defaultValue": null,
        "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
        "name": "includes",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((searchElement: number, fromIndex?: number) => boolean) | ((searchElement: number, fromIndex?: number) => boolean) | ((searchElement: number, fromIndex?: number) => boolean)"
        }
      },
      "flatMap": {
        "defaultValue": null,
        "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value.",
        "name": "flatMap",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2019.array.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2019.array.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2019.array.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2019.array.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(<U, This = undefined>(callback: (this: This, value: number, index: number, array: number[]) => U | readonly U[], thisArg?: This) => U[]) | (<U, This = undefined>(callback: (this: This, value: number, index: number, array: number[]) => U | readonly U[], thisArg?: This) => U[]) | (<U, This = undefined>(callback: (thi..."
        }
      },
      "flat": {
        "defaultValue": null,
        "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\n@param depth The maximum recursion depth",
        "name": "flat",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2019.array.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2019.array.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2019.array.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2019.array.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]) | (<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]) | (<A, D extends number = 1>(this: A, depth?: D) => FlatArray<...>[])"
        }
      },
      "at": {
        "defaultValue": null,
        "description": "Returns the item located at the specified index.\n@param index The zero-based index of the desired code unit. A negative index will count back from the last item.",
        "name": "at",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2022.array.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2022.array.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2022.array.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2022.array.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "((index: number) => number) | ((index: number) => number) | ((index: number) => number)"
        }
      },
      "__@iterator@11561": {
        "defaultValue": null,
        "description": "Iterator",
        "name": "__@iterator@11561",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(() => IterableIterator<number>) | (() => IterableIterator<number>) | (() => IterableIterator<number>)"
        }
      },
      "__@unscopables@11563": {
        "defaultValue": null,
        "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
        "name": "__@unscopables@11563",
        "parent": {
          "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
          "name": "Array"
        },
        "declarations": [
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
            "name": "Array"
          },
          {
            "fileName": "salt-ds/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
            "name": "Array"
          }
        ],
        "required": true,
        "type": {
          "name": "(() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }) | (() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }) | (() => { ...; })"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "RowSelectionCheckboxHeaderCellValue",
    "methods": [],
    "props": {
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridHeaderValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridHeaderValueProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridColumnModel<T>"
        }
      },
      "isFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isFocused",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridHeaderValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridHeaderValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "RowSelectionCheckboxCellValue",
    "methods": [],
    "props": {
      "row": {
        "defaultValue": null,
        "description": "",
        "name": "row",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridRowModel<T>"
        }
      },
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridColumnModel<T>"
        }
      },
      "isFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isFocused",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "",
        "name": "validationStatus",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellValidationState"
        }
      },
      "validationMessage": {
        "defaultValue": null,
        "description": "",
        "name": "validationMessage",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "validationType": {
        "defaultValue": null,
        "description": "",
        "name": "validationType",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellValidationType"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "RowSelectionRadioColumn",
    "methods": [],
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Text align for the header and cells.",
        "name": "align",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "pinned": {
        "defaultValue": null,
        "description": "Whether the column should be pinned `left` or `right`. By default columns\nare unpinned. Accepts `\"left\" | \"right\" | null`.",
        "name": "pinned",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridColumnPin"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Unique identifier of the column.",
        "name": "id",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "sortable": {
        "defaultValue": null,
        "description": "Enables sorting (by sort order: `asc | desc | none`) for the column.\nTo enable column header's keyboard navigation on sort,\nusers need to set `headerIsFocusable` prop to `true` in Grid component.\nTo customise how GridColumn data sorts, use also  `customSort` or `onSortOrderChanged`.",
        "name": "sortable",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "customSort": {
        "defaultValue": null,
        "description": "Custom sorting function. Use for client side sorting.",
        "name": "customSort",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(args: { rowData: T[]; sortOrder: SortOrder; }) => T[]"
        }
      },
      "onSortOrderChange": {
        "defaultValue": null,
        "description": "Exposes GridColumn sort order. Use for server side sorting.",
        "name": "onSortOrderChange",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(args: { sortOrder: SortOrder; }) => void"
        }
      },
      "defaultWidth": {
        "defaultValue": null,
        "description": "Default width of the column in `px`.",
        "name": "defaultWidth",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minWidth": {
        "defaultValue": null,
        "description": "Min width of the column.",
        "name": "minWidth",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onWidthChanged": {
        "defaultValue": null,
        "description": "Callback invoked when the user resizes the column.",
        "name": "onWidthChanged",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(width: number) => void"
        }
      },
      "cellComponent": {
        "defaultValue": null,
        "description": "Component to render for every cell in the column. Useful when major\ncustomization is needed. Use this only if `cellValueComponent` is not\nsufficient. Default implementation of cell component takes care of\nselection, hover, focus and other basic grid features.",
        "name": "cellComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridCellProps<T, any>>"
        }
      },
      "cellValueComponent": {
        "defaultValue": null,
        "description": "Component to render inside every cell. This is the preferred way of\ncustomizing grid cells.",
        "name": "cellValueComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridCellValueProps<T, any>>"
        }
      },
      "getValue": {
        "defaultValue": null,
        "description": "Cell value getter. Should return the value to be displayed in the cell\nfor the given row data item.",
        "name": "getValue",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(rowData: T) => any"
        }
      },
      "getValidationStatus": {
        "defaultValue": null,
        "description": "Cell validation status getter. Should return one of the known validation status names: \"none\" | \"error\" | \"warning\"\nIf you require a custom validation status, you can achieve that by providing a custom cell component.",
        "name": "getValidationStatus",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: GridCellValueProps<T, any>) => CellValidationState"
        }
      },
      "getValidationMessage": {
        "defaultValue": null,
        "description": "Cell validation status message getter. Should return a string description of the validation state that can be used for the screen reader.\nThis prop is optional but if you don't provide a function a default message will be used.",
        "name": "getValidationMessage",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: GridCellValueProps<T, any>) => string"
        }
      },
      "validationType": {
        "defaultValue": null,
        "description": "Cell validation type. Determines the visual style of the validation. The available values are \"strong\" and \"light\". Strong will display the icon\nalong side the background and border. Light will only affect border and background. Use light if you are validation the whole row, and optionally\nstrong on one of the columns, and strong if you are validating user input on a particular cell.\nThe default value is \"light\".",
        "name": "validationType",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellValidationType"
        }
      },
      "headerClassName": {
        "defaultValue": null,
        "description": "CSS class to be applied to the column header.\nUseful for minor customizations",
        "name": "headerClassName",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headerComponent": {
        "defaultValue": null,
        "description": "Custom header component. Use this when `headerValueComponent` doesn't\nprovide enough flexibility.",
        "name": "headerComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<HeaderCellProps<T>>"
        }
      },
      "headerValueComponent": {
        "defaultValue": null,
        "description": "Renders the content of the column header. This is the preferred way of\ncustomizing column headers.",
        "name": "headerValueComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridHeaderValueProps<T>>"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback to be invoked when the user modifies a cell value.",
        "name": "onChange",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(row: T, rowIndex: number, value: string) => void"
        }
      },
      "onKeyDown": {
        "defaultValue": null,
        "description": "A callback to be invoked on key down when the focus is in this column.",
        "name": "onKeyDown",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent<HTMLDivElement>, rowIndex: number) => void"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Children is optional, and accepts non-rendered elements i.e. `CellEditor`",
        "name": "children",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "aria-label is optional, and accepts any string value",
        "name": "aria-label",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "Grid",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "At least 1 children is expected, options are `ColumnGroup` or `GridColumn`.",
        "name": "children",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "zebra": {
        "defaultValue": null,
        "description": "If `true`, zebra stripes are enabled (odd/even rows have alternate colours)",
        "name": "zebra",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideHeader": {
        "defaultValue": null,
        "description": "If `true`, grid header is hidden.",
        "name": "hideHeader",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "columnSeparators": {
        "defaultValue": null,
        "description": "If `true`, column separators are rendered.",
        "name": "columnSeparators",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "pinnedSeparators": {
        "defaultValue": null,
        "description": "If `true`, separators are rendered between pinned and unpinned columns.",
        "name": "pinnedSeparators",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rowData": {
        "defaultValue": null,
        "description": "Row data objects. Sparse arrays are supported.",
        "name": "rowData",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": true,
        "type": {
          "name": "T[]"
        }
      },
      "rowKeyGetter": {
        "defaultValue": null,
        "description": "Should return unique string for a given row data object.\nIf rowData is sparse then this function should work with undefined row data\nobjects and create keys based on row index. `(row: T, index: number) => string`",
        "name": "rowKeyGetter",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RowKeyGetter<T>"
        }
      },
      "defaultSelectedRowIdxs": {
        "defaultValue": null,
        "description": "Rows with these indices are selected by default.",
        "name": "defaultSelectedRowIdxs",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number[]"
        }
      },
      "selectedRowIdxs": {
        "defaultValue": null,
        "description": "Selected row indices for controlled mode.",
        "name": "selectedRowIdxs",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number[]"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "The variant to use. Options are `primary` and `secondary`. Default value is\n`primary`. `secondary` variant changes grid background to reduce contrast.",
        "name": "variant",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\""
        }
      },
      "rowSelectionMode": {
        "defaultValue": null,
        "description": "Options are `single`, `multi` and `none`.",
        "name": "rowSelectionMode",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridRowSelectionMode"
        }
      },
      "onRowSelected": {
        "defaultValue": null,
        "description": "",
        "name": "onRowSelected",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(selectedRowIdxs: number[]) => void"
        }
      },
      "columnMove": {
        "defaultValue": null,
        "description": "If `true`, user will be able to move columns using drag and drop.",
        "name": "columnMove",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onColumnMoved": {
        "defaultValue": null,
        "description": "Accepts `(columnId: string, fromIndex: number, toIndex: number) => void`",
        "name": "onColumnMoved",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridColumnMoveHandler"
        }
      },
      "cellSelectionMode": {
        "defaultValue": null,
        "description": "Options are `range` and `none`.",
        "name": "cellSelectionMode",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridCellSelectionMode"
        }
      },
      "onVisibleRowRangeChange": {
        "defaultValue": null,
        "description": "",
        "name": "onVisibleRowRangeChange",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(start: number, end: number) => void"
        }
      },
      "headerIsFocusable": {
        "defaultValue": null,
        "description": "If `true`, keyboard navigation is enabled for the header.",
        "name": "headerIsFocusable",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "getRowValidationStatus": {
        "defaultValue": null,
        "description": "",
        "name": "getRowValidationStatus",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
          "name": "GridProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/Grid.tsx",
            "name": "GridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(row: GridRowModel<T>) => CellValidationState"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "GridColumn",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Unique identifier of the column.",
        "name": "id",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "sortable": {
        "defaultValue": null,
        "description": "Enables sorting (by sort order: `asc | desc | none`) for the column.\nTo enable column header's keyboard navigation on sort,\nusers need to set `headerIsFocusable` prop to `true` in Grid component.\nTo customise how GridColumn data sorts, use also  `customSort` or `onSortOrderChanged`.",
        "name": "sortable",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "customSort": {
        "defaultValue": null,
        "description": "Custom sorting function. Use for client side sorting.",
        "name": "customSort",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(args: { rowData: T[]; sortOrder: SortOrder; }) => T[]"
        }
      },
      "onSortOrderChange": {
        "defaultValue": null,
        "description": "Exposes GridColumn sort order. Use for server side sorting.",
        "name": "onSortOrderChange",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(args: { sortOrder: SortOrder; }) => void"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name is displayed on the column header by default.",
        "name": "name",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultWidth": {
        "defaultValue": null,
        "description": "Default width of the column in `px`.",
        "name": "defaultWidth",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minWidth": {
        "defaultValue": null,
        "description": "Min width of the column.",
        "name": "minWidth",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onWidthChanged": {
        "defaultValue": null,
        "description": "Callback invoked when the user resizes the column.",
        "name": "onWidthChanged",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(width: number) => void"
        }
      },
      "pinned": {
        "defaultValue": null,
        "description": "Whether the column should be pinned `left` or `right`. By default columns\nare unpinned. Accepts `\"left\" | \"right\" | null`.",
        "name": "pinned",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridColumnPin"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Text align for the header and cells.",
        "name": "align",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "cellComponent": {
        "defaultValue": null,
        "description": "Component to render for every cell in the column. Useful when major\ncustomization is needed. Use this only if `cellValueComponent` is not\nsufficient. Default implementation of cell component takes care of\nselection, hover, focus and other basic grid features.",
        "name": "cellComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridCellProps<T, any>>"
        }
      },
      "cellValueComponent": {
        "defaultValue": null,
        "description": "Component to render inside every cell. This is the preferred way of\ncustomizing grid cells.",
        "name": "cellValueComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridCellValueProps<T, any>>"
        }
      },
      "getValue": {
        "defaultValue": null,
        "description": "Cell value getter. Should return the value to be displayed in the cell\nfor the given row data item.",
        "name": "getValue",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(rowData: T) => any"
        }
      },
      "getValidationStatus": {
        "defaultValue": null,
        "description": "Cell validation status getter. Should return one of the known validation status names: \"none\" | \"error\" | \"warning\"\nIf you require a custom validation status, you can achieve that by providing a custom cell component.",
        "name": "getValidationStatus",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: GridCellValueProps<T, any>) => CellValidationState"
        }
      },
      "getValidationMessage": {
        "defaultValue": null,
        "description": "Cell validation status message getter. Should return a string description of the validation state that can be used for the screen reader.\nThis prop is optional but if you don't provide a function a default message will be used.",
        "name": "getValidationMessage",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: GridCellValueProps<T, any>) => string"
        }
      },
      "validationType": {
        "defaultValue": null,
        "description": "Cell validation type. Determines the visual style of the validation. The available values are \"strong\" and \"light\". Strong will display the icon\nalong side the background and border. Light will only affect border and background. Use light if you are validation the whole row, and optionally\nstrong on one of the columns, and strong if you are validating user input on a particular cell.\nThe default value is \"light\".",
        "name": "validationType",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellValidationType"
        }
      },
      "headerClassName": {
        "defaultValue": null,
        "description": "CSS class to be applied to the column header.\nUseful for minor customizations",
        "name": "headerClassName",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headerComponent": {
        "defaultValue": null,
        "description": "Custom header component. Use this when `headerValueComponent` doesn't\nprovide enough flexibility.",
        "name": "headerComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<HeaderCellProps<T>>"
        }
      },
      "headerValueComponent": {
        "defaultValue": null,
        "description": "Renders the content of the column header. This is the preferred way of\ncustomizing column headers.",
        "name": "headerValueComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridHeaderValueProps<T>>"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback to be invoked when the user modifies a cell value.",
        "name": "onChange",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(row: T, rowIndex: number, value: string) => void"
        }
      },
      "onKeyDown": {
        "defaultValue": null,
        "description": "A callback to be invoked on key down when the focus is in this column.",
        "name": "onKeyDown",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent<HTMLDivElement>, rowIndex: number) => void"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Children is optional, and accepts non-rendered elements i.e. `CellEditor`",
        "name": "children",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "aria-label is optional, and accepts any string value",
        "name": "aria-label",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "RowSelectionCheckboxColumn",
    "methods": [],
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Text align for the header and cells.",
        "name": "align",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "pinned": {
        "defaultValue": null,
        "description": "Whether the column should be pinned `left` or `right`. By default columns\nare unpinned. Accepts `\"left\" | \"right\" | null`.",
        "name": "pinned",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridColumnPin"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Unique identifier of the column.",
        "name": "id",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "sortable": {
        "defaultValue": null,
        "description": "Enables sorting (by sort order: `asc | desc | none`) for the column.\nTo enable column header's keyboard navigation on sort,\nusers need to set `headerIsFocusable` prop to `true` in Grid component.\nTo customise how GridColumn data sorts, use also  `customSort` or `onSortOrderChanged`.",
        "name": "sortable",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "customSort": {
        "defaultValue": null,
        "description": "Custom sorting function. Use for client side sorting.",
        "name": "customSort",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(args: { rowData: T[]; sortOrder: SortOrder; }) => T[]"
        }
      },
      "onSortOrderChange": {
        "defaultValue": null,
        "description": "Exposes GridColumn sort order. Use for server side sorting.",
        "name": "onSortOrderChange",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(args: { sortOrder: SortOrder; }) => void"
        }
      },
      "defaultWidth": {
        "defaultValue": null,
        "description": "Default width of the column in `px`.",
        "name": "defaultWidth",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minWidth": {
        "defaultValue": null,
        "description": "Min width of the column.",
        "name": "minWidth",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onWidthChanged": {
        "defaultValue": null,
        "description": "Callback invoked when the user resizes the column.",
        "name": "onWidthChanged",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(width: number) => void"
        }
      },
      "cellComponent": {
        "defaultValue": null,
        "description": "Component to render for every cell in the column. Useful when major\ncustomization is needed. Use this only if `cellValueComponent` is not\nsufficient. Default implementation of cell component takes care of\nselection, hover, focus and other basic grid features.",
        "name": "cellComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridCellProps<T, any>>"
        }
      },
      "cellValueComponent": {
        "defaultValue": null,
        "description": "Component to render inside every cell. This is the preferred way of\ncustomizing grid cells.",
        "name": "cellValueComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridCellValueProps<T, any>>"
        }
      },
      "getValue": {
        "defaultValue": null,
        "description": "Cell value getter. Should return the value to be displayed in the cell\nfor the given row data item.",
        "name": "getValue",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(rowData: T) => any"
        }
      },
      "getValidationStatus": {
        "defaultValue": null,
        "description": "Cell validation status getter. Should return one of the known validation status names: \"none\" | \"error\" | \"warning\"\nIf you require a custom validation status, you can achieve that by providing a custom cell component.",
        "name": "getValidationStatus",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: GridCellValueProps<T, any>) => CellValidationState"
        }
      },
      "getValidationMessage": {
        "defaultValue": null,
        "description": "Cell validation status message getter. Should return a string description of the validation state that can be used for the screen reader.\nThis prop is optional but if you don't provide a function a default message will be used.",
        "name": "getValidationMessage",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: GridCellValueProps<T, any>) => string"
        }
      },
      "validationType": {
        "defaultValue": null,
        "description": "Cell validation type. Determines the visual style of the validation. The available values are \"strong\" and \"light\". Strong will display the icon\nalong side the background and border. Light will only affect border and background. Use light if you are validation the whole row, and optionally\nstrong on one of the columns, and strong if you are validating user input on a particular cell.\nThe default value is \"light\".",
        "name": "validationType",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellValidationType"
        }
      },
      "headerClassName": {
        "defaultValue": null,
        "description": "CSS class to be applied to the column header.\nUseful for minor customizations",
        "name": "headerClassName",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headerComponent": {
        "defaultValue": null,
        "description": "Custom header component. Use this when `headerValueComponent` doesn't\nprovide enough flexibility.",
        "name": "headerComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<HeaderCellProps<T>>"
        }
      },
      "headerValueComponent": {
        "defaultValue": null,
        "description": "Renders the content of the column header. This is the preferred way of\ncustomizing column headers.",
        "name": "headerValueComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridHeaderValueProps<T>>"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback to be invoked when the user modifies a cell value.",
        "name": "onChange",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(row: T, rowIndex: number, value: string) => void"
        }
      },
      "onKeyDown": {
        "defaultValue": null,
        "description": "A callback to be invoked on key down when the focus is in this column.",
        "name": "onKeyDown",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent<HTMLDivElement>, rowIndex: number) => void"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Children is optional, and accepts non-rendered elements i.e. `CellEditor`",
        "name": "children",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "aria-label is optional, and accepts any string value",
        "name": "aria-label",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "TextCellEditor",
    "methods": [],
    "props": {
      "row": {
        "defaultValue": null,
        "description": "",
        "name": "row",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/TextCellEditor.tsx",
          "name": "TextCellEditorProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/TextCellEditor.tsx",
            "name": "TextCellEditorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridRowModel<T>"
        }
      },
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/TextCellEditor.tsx",
          "name": "TextCellEditorProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/TextCellEditor.tsx",
            "name": "TextCellEditorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridColumnModel<T>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "DropdownCellEditor",
    "methods": [],
    "props": {
      "options": {
        "defaultValue": null,
        "description": "",
        "name": "options",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/DropdownCellEditor.tsx",
          "name": "DropdownCellEditorProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/DropdownCellEditor.tsx",
            "name": "DropdownCellEditorProps"
          }
        ],
        "required": true,
        "type": {
          "name": "readonly string[]"
        }
      },
      "row": {
        "defaultValue": null,
        "description": "",
        "name": "row",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/DropdownCellEditor.tsx",
          "name": "DropdownCellEditorProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/DropdownCellEditor.tsx",
            "name": "DropdownCellEditorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridRowModel<T>"
        }
      },
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/DropdownCellEditor.tsx",
          "name": "DropdownCellEditorProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/DropdownCellEditor.tsx",
            "name": "DropdownCellEditorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridColumnModel<T>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "NumericCellValue",
    "methods": [],
    "props": {
      "row": {
        "defaultValue": null,
        "description": "",
        "name": "row",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridRowModel<T>"
        }
      },
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": true,
        "type": {
          "name": "GridColumnModel<T>"
        }
      },
      "isFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isFocused",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "",
        "name": "validationStatus",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellValidationState"
        }
      },
      "validationMessage": {
        "defaultValue": null,
        "description": "",
        "name": "validationMessage",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "validationType": {
        "defaultValue": null,
        "description": "",
        "name": "validationType",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridCellValueProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridCellValueProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellValidationType"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "NumericCellEditor",
    "methods": [],
    "props": {
      "row": {
        "defaultValue": null,
        "description": "",
        "name": "row",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/NumericColumn.tsx",
          "name": "NumericEditorProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/NumericColumn.tsx",
            "name": "NumericEditorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridRowModel<T>"
        }
      },
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/NumericColumn.tsx",
          "name": "NumericEditorProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/NumericColumn.tsx",
            "name": "NumericEditorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridColumnModel<T>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/V772579/code/salt/salt-ds/packages/data-grid/src/index.ts",
    "description": "",
    "displayName": "NumericColumn",
    "methods": [],
    "props": {
      "precision": {
        "defaultValue": null,
        "description": "",
        "name": "precision",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/NumericColumn.tsx",
          "name": "NumericColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/NumericColumn.tsx",
            "name": "NumericColumnProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Unique identifier of the column.",
        "name": "id",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "sortable": {
        "defaultValue": null,
        "description": "Enables sorting (by sort order: `asc | desc | none`) for the column.\nTo enable column header's keyboard navigation on sort,\nusers need to set `headerIsFocusable` prop to `true` in Grid component.\nTo customise how GridColumn data sorts, use also  `customSort` or `onSortOrderChanged`.",
        "name": "sortable",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "customSort": {
        "defaultValue": null,
        "description": "Custom sorting function. Use for client side sorting.",
        "name": "customSort",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(args: { rowData: T[]; sortOrder: SortOrder; }) => T[]"
        }
      },
      "onSortOrderChange": {
        "defaultValue": null,
        "description": "Exposes GridColumn sort order. Use for server side sorting.",
        "name": "onSortOrderChange",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(args: { sortOrder: SortOrder; }) => void"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name is displayed on the column header by default.",
        "name": "name",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultWidth": {
        "defaultValue": null,
        "description": "Default width of the column in `px`.",
        "name": "defaultWidth",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minWidth": {
        "defaultValue": null,
        "description": "Min width of the column.",
        "name": "minWidth",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onWidthChanged": {
        "defaultValue": null,
        "description": "Callback invoked when the user resizes the column.",
        "name": "onWidthChanged",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(width: number) => void"
        }
      },
      "pinned": {
        "defaultValue": null,
        "description": "Whether the column should be pinned `left` or `right`. By default columns\nare unpinned. Accepts `\"left\" | \"right\" | null`.",
        "name": "pinned",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridColumnPin"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Text align for the header and cells.",
        "name": "align",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "cellComponent": {
        "defaultValue": null,
        "description": "Component to render for every cell in the column. Useful when major\ncustomization is needed. Use this only if `cellValueComponent` is not\nsufficient. Default implementation of cell component takes care of\nselection, hover, focus and other basic grid features.",
        "name": "cellComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridCellProps<T, any>>"
        }
      },
      "cellValueComponent": {
        "defaultValue": null,
        "description": "Component to render inside every cell. This is the preferred way of\ncustomizing grid cells.",
        "name": "cellValueComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridCellValueProps<T, any>>"
        }
      },
      "getValue": {
        "defaultValue": null,
        "description": "Cell value getter. Should return the value to be displayed in the cell\nfor the given row data item.",
        "name": "getValue",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(rowData: T) => any"
        }
      },
      "getValidationStatus": {
        "defaultValue": null,
        "description": "Cell validation status getter. Should return one of the known validation status names: \"none\" | \"error\" | \"warning\"\nIf you require a custom validation status, you can achieve that by providing a custom cell component.",
        "name": "getValidationStatus",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: GridCellValueProps<T, any>) => CellValidationState"
        }
      },
      "getValidationMessage": {
        "defaultValue": null,
        "description": "Cell validation status message getter. Should return a string description of the validation state that can be used for the screen reader.\nThis prop is optional but if you don't provide a function a default message will be used.",
        "name": "getValidationMessage",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: GridCellValueProps<T, any>) => string"
        }
      },
      "validationType": {
        "defaultValue": null,
        "description": "Cell validation type. Determines the visual style of the validation. The available values are \"strong\" and \"light\". Strong will display the icon\nalong side the background and border. Light will only affect border and background. Use light if you are validation the whole row, and optionally\nstrong on one of the columns, and strong if you are validating user input on a particular cell.\nThe default value is \"light\".",
        "name": "validationType",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellValidationType"
        }
      },
      "headerClassName": {
        "defaultValue": null,
        "description": "CSS class to be applied to the column header.\nUseful for minor customizations",
        "name": "headerClassName",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headerComponent": {
        "defaultValue": null,
        "description": "Custom header component. Use this when `headerValueComponent` doesn't\nprovide enough flexibility.",
        "name": "headerComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<HeaderCellProps<T>>"
        }
      },
      "headerValueComponent": {
        "defaultValue": null,
        "description": "Renders the content of the column header. This is the preferred way of\ncustomizing column headers.",
        "name": "headerValueComponent",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<GridHeaderValueProps<T>>"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback to be invoked when the user modifies a cell value.",
        "name": "onChange",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(row: T, rowIndex: number, value: string) => void"
        }
      },
      "onKeyDown": {
        "defaultValue": null,
        "description": "A callback to be invoked on key down when the focus is in this column.",
        "name": "onKeyDown",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent<HTMLDivElement>, rowIndex: number) => void"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Children is optional, and accepts non-rendered elements i.e. `CellEditor`",
        "name": "children",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "aria-label is optional, and accepts any string value",
        "name": "aria-label",
        "parent": {
          "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
          "name": "GridColumnProps"
        },
        "declarations": [
          {
            "fileName": "salt-ds/packages/data-grid/src/GridColumn.tsx",
            "name": "GridColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  }
]