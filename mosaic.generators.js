/**
 * Mosaic
 * (this file was generated by @jpmorganchase/mosaic-create-site)
 *
 * 1. Create your first site
 *
 * Generate an initial Mosaic site with
 *
 * > yarn mosaic-create-site create -g mosaic -o <path to your output directory>
 *
 * OR run in interactive mode to see the other generators that are available
 *
 * > yarn mosaic-create-site create -i -o <path to your output directory>
 *
 * 2. Configuration
 *
 * Mosaic is composed of 2 services, the Mosaic Site and the Mosaic Core Filesystem.
 *
 * What is the Mosaic Core File System
 *
 * The Mosaic Core Filesystem is composed of aggregated content from heterogeneous data sources.
 * The Mosaic Core Filesystem config defines sources & plugins which translate your content to the Mosaic design language.
 *
 * Sources are remote content sources which Mosaic will pull content from.
 * Plugins are composible features which can create pages or add existing content/metadata to existing pages. 
 *  
 * What is the Mosaic Site service ?
 *
 * The Mosaic site is a Next JS app which reads from the Mosaic Filesystem and renders the pages using configurable components, layouts and theme.
 * The configuration of the site is handled by the `mosaic-create-site` which generates a pre-configured site.
 *
 * How do you setup a Mosaic site ?
 * 
 * The initial sources/config for a Mosaic site is generated by a bin script `mosaic-create-site` which provides a menu of available site generators.
 * Mosaic generators are PlopJS (http://plopjs.com) files.
 *
 * Multiple site generators are available which can be configured via a file called `mosaic.generators.js`.
 *
 * To just create `mosaic.generators.js`, run
 * > yarn mosaic-create-site init
 * Alternatively, when you run `mosaic-create-site` you can specify your generator config via the `--config` argument.
 * If no generator config is specified and one does not exist in the current directory, one will be created for you. 
 * You can edit this file and re-run the create command to generate a non-default site. 
 *
 * How can I configure my own components, theme or layouts to the Mosaic site ?
 * 
 * In `mosaic.generators.js` the callback `getGenerators()` can be used to configure the generated `_app.tsx` with additional components, theme or layouts.
 * 
 * You can even add additional imports which might be required by your generated site.
 * Here is a kitchen sink view of the standard generator being configured with `sources`, `dependencies` and `imports`
 * 
 * `dependencies` will add more entries to your site's `package.json`
 * `imports` will add more entries to your site's `_app.tsx`
 *
 * const { getGenerators } = require('@jpmorganchase/mosaic-create-site');
 * const standardGeneratorConfig = require('@jpmorganchase/mosaic-standard-generator/dist/generator.config.js');
 * 
 * module.exports = {
 *  generators: [
 *    ...getGenerators()
 *    [
 *      '@jpmorganchase/mosaic-standard-generator/dist/generator.js',
 *      {
 *        ...standardGeneratorConfig,
 *        generatorName: 'demo', // name of generator used in interactive mode
 *        name: '@jpmorganchase/mosaic-demo', // package name
 *        namespace: 'demo',
 *        description: "Mosaic Development Demo",
 *        homepage: '/demo',
 *        // To add your own Source, add a sources entry
 *        sources: [
 *          {
 *            modulePath: require.resolve('@jpmorganchase/mosaic-source-git-repo'),
 *            namespace: 'demo', // each site has it's own namespace, think of this as your content's uid
 *            options: {
 *              // To run locally, enter your credentials to access the BitBucket repo
 *              // !! Polite Reminder... do not store credentials in code !!
 *              // For final deployments, you could put repo access credentials securely in environment variables provided by Gaia console.
 *              // credentials: "{process.env.FID}:{process.env.FID_PERSONAL_ACCESS_TOKEN}",
 *              // If running locally
 *              // create an environment variable like MOSAIC_DOCS_CLONE_CREDENTIALS to let the user define it via the CLI
 *              // export MOSAIC_DOCS_CLONE_CREDENTIALS="<sid>:<Personal Access Token (PAT) provided by your Repo OR password>",
 *              credentials: process.env.MOSAIC_DOCS_CLONE_CREDENTIALS,
 *              prefixDir: 'demo',
 *              subfolder: 'docs', // subfolder within your branch containing the docs, typically 'docs'
 *              repo: 'github.com/jpmorganchase/mosaic.git', // repo url without any protocol
 *              branch: 'main', // branch where docs are pulled from
 *              extensions: ['.mdx'], // extensions of content which should be pulled
 *              remote: 'origin' // what is the shorthand name of the remote repo, typically 'origin'
 *            }
 *          }
 *        ],
 *       dependencies: [
 *         { package: "@my-package/components", version: "^1.0.0" },
 *         { package: "@my-package/layouts", version: "^1.0.0" },
 *         { package: "@my-package/theme", version: "^1.0.0" },
 *       ],
 *       imports: [
 *         {
 *           import: "import myComponents from '@my-package/components';",
 *           identifier: "myComponents",
 *           type: "component",
 *         },
 *         {
 *           import: "import myLayouts from '@my-package/layouts';",
 *           identifier: "myLayouts",
 *           type: "layout",
 *         },
 *         {
 *           import: "import '@my-package/theme/dist/index.css';",
 *         }
 *       ]
 *      }
 *    ]
 *  ]
 * };
 * 
 * Alternatively, create your own generator and use that instead.
 * 
 * 3. Site Generation
 *   
 * Once you have created `mosaic.generators.js` (and configured any customisations) you can generate your site.
 * 
 * To generate a site run
 * 
 * > yarn mosaic-create-site create -o <path to site> -i
 * 
 * From the menu, selector the required generator with the required templates/config.
 * 
 * How can I add my own content ?
 *
 * Once you have generated a site, you can edit the file `mosaic.config.js` and add/configure a source entry.
 * Once you edit `mosaic.config.js` then re-running the generator will overwrite any changes.
 * If you plan to re-run the generator, add the `sources` to `mosaic.generators.js` instead, then you will be able to 
 * preserve your config and refresh the site.
 * 
 */
const {
  getGenerators,
} = require("@jpmorganchase/mosaic-create-site");

module.exports = {
  /** generators defines an array of Mosaic generators and associated config, which configure your generated site
   * e.g
   * generators: 'path to generator' | [ 'path to generator', { config } ]
   *
   * If you want to add generators, add elements to the array
   * If you want to override a generator, then use map/deepmerge to replace values from selected generatorName
   * If you want to delete a generator, remove it from the array
   */
   generators: getGenerators(),
};