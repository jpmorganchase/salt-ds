diff --git a/dist/PropsTablePlugin.js b/dist/PropsTablePlugin.js
index ba25c5e30552ef13ba88feb433d2f835598eff6c..61e9d903c63ba27deec40802f478e2aa2c77faf8 100644
--- a/dist/PropsTablePlugin.js
+++ b/dist/PropsTablePlugin.js
@@ -1,76 +1,93 @@
-import remarkDirective from 'remark-directive';
-import remarkGfm from 'remark-gfm';
-import { remark } from 'remark';
-import { visit } from 'unist-util-visit';
-import { parse } from 'react-docgen-typescript';
+import remarkDirective from "remark-directive";
+import remarkGfm from "remark-gfm";
+import { remark } from "remark";
+import { visit } from "unist-util-visit";
+import { parse } from "react-docgen-typescript";
+import path from "path";
+
 const options = {
-    propFilter: prop => !/@types[\\/]react[\\/]/.test(prop.parent?.fileName || '')
+  propFilter: (prop) =>
+    !/@types[\\/]react[\\/]/.test(prop.parent?.fileName || ""),
 };
 const PropsTablePlugin = {
-    // TODO: add support for active mode
-    async $afterSource(pages) {
-        const processor = remark().use(remarkDirective).use(remarkGfm);
-        for (const page of pages) {
-            const tree = await processor.parse(page.content);
-            visit(tree, (node) => node.type === 'textDirective', (node) => {
-                if (node.name !== 'propsTable')
-                    return;
-                const propsTableData = parse(node.attributes.src, options)[0].props;
-                const tableHeaders = {
-                    type: 'tableRow',
-                    children: [
-                        {
-                            type: 'tableCell',
-                            children: [{ type: 'text', value: 'Name' }]
-                        },
-                        {
-                            type: 'tableCell',
-                            children: [{ type: 'text', value: 'Type' }]
-                        },
-                        {
-                            type: 'tableCell',
-                            children: [{ type: 'text', value: 'Description' }]
-                        },
-                        {
-                            type: 'tableCell',
-                            children: [{ type: 'text', value: 'Default' }]
-                        }
-                    ]
-                };
-                const tableBody = Object.values(propsTableData).map(({ name, type, description, defaultValue }) => ({
-                    type: 'tableRow',
-                    children: [
-                        {
-                            type: 'tableCell',
-                            children: [{ type: 'text', value: name }]
-                        },
-                        {
-                            type: 'tableCell',
-                            children: [{ type: 'inlineCode', value: type.name }]
-                        },
-                        {
-                            type: 'tableCell',
-                            children: [{ type: 'html', value: description.replace(/\n/g, ' ') }]
-                        },
-                        {
-                            type: 'tableCell',
-                            children: [{ type: 'inlineCode', value: defaultValue ? defaultValue.value : '-' }]
-                        }
-                    ]
-                }));
-                const table = [tableHeaders, ...tableBody];
-                // Replaces the current node with a new table node containing the props
-                node.type = 'table';
-                node.children = table;
-            });
-            page.content = remark()
-                .data('settings', { fences: true })
-                .use(remarkDirective)
-                .use(remarkGfm)
-                .stringify(tree);
+  // TODO: add support for active mode
+  async $afterSource(pages) {
+    const processor = remark().use(remarkDirective).use(remarkGfm);
+    for (const page of pages) {
+      const tree = await processor.parse(page.content);
+      visit(
+        tree,
+        (node) => node.type === "textDirective",
+        (node) => {
+          if (node.name !== "propsTable") return;
+
+          const componentFile = path.resolve(node.attributes.src);
+          const propsTableData = parse(componentFile, options)[0].props;
+          const tableHeaders = {
+            type: "tableRow",
+            children: [
+              {
+                type: "tableCell",
+                children: [{ type: "text", value: "Name" }],
+              },
+              {
+                type: "tableCell",
+                children: [{ type: "text", value: "Type" }],
+              },
+              {
+                type: "tableCell",
+                children: [{ type: "text", value: "Description" }],
+              },
+              {
+                type: "tableCell",
+                children: [{ type: "text", value: "Default" }],
+              },
+            ],
+          };
+          const tableBody = Object.values(propsTableData).map(
+            ({ name, type, description, defaultValue }) => ({
+              type: "tableRow",
+              children: [
+                {
+                  type: "tableCell",
+                  children: [{ type: "text", value: name }],
+                },
+                {
+                  type: "tableCell",
+                  children: [{ type: "inlineCode", value: type.name }],
+                },
+                {
+                  type: "tableCell",
+                  children: [
+                    { type: "html", value: description.replace(/\n/g, " ") },
+                  ],
+                },
+                {
+                  type: "tableCell",
+                  children: [
+                    {
+                      type: "inlineCode",
+                      value: defaultValue ? defaultValue.value : "-",
+                    },
+                  ],
+                },
+              ],
+            })
+          );
+          const table = [tableHeaders, ...tableBody];
+          // Replaces the current node with a new table node containing the props
+          node.type = "table";
+          node.children = table;
         }
-        return pages;
+      );
+      page.content = remark()
+        .data("settings", { fences: true })
+        .use(remarkDirective)
+        .use(remarkGfm)
+        .stringify(tree);
     }
+    return pages;
+  },
 };
 export default PropsTablePlugin;
 //# sourceMappingURL=PropsTablePlugin.js.map
