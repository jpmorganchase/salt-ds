/* Styles applied to root component (TokenizedInput) */
.salt-density-medium {
  --tokenizedInput-gutter-size: var(--salt-size-basis-unit);
  --tokenizedInput-pill-group-y-padding: calc(var(--salt-size-unit) / 2);
  --tokenizedInput-last-pill-margin: var(--salt-size-unit);
}
.salt-density-touch {
  --tokenizedInput-gutter-size: var(--salt-size-basis-unit);
  --tokenizedInput-pill-group-y-padding: calc(var(--salt-size-unit) / 2 + 2px);
  --tokenizedInput-last-pill-margin: calc(var(--salt-size-unit) / 2);
}

.salt-density-low {
  --tokenizedInput-gutter-size: var(--salt-size-basis-unit);
  --tokenizedInput-pill-group-y-padding: calc(var(--salt-size-unit) / 2 + 1px);
  --tokenizedInput-last-pill-margin: calc(var(--salt-size-unit) / 2);
}

.salt-density-high {
  --tokenizedInput-gutter-size: calc(var(--salt-size-basis-unit) - 1px);
  --tokenizedInput-pill-group-y-padding: calc(var(--salt-size-unit) / 2 + 1px);
  --tokenizedInput-last-pill-margin: var(--salt-size-unit);
}

.saltTokenizedInput {
  --tokenizedInput-spacing: var(--salt-size-unit);
  --tokenizedInput-height: var(--salt-size-base);
}

.saltTokenizedInput {
  display: inline-flex;
  justify-content: space-between;
  min-width: 8em; /* same min-width as Input component */
  width: 100%;
}

/* Styles applied to root component on hover state  */
.saltTokenizedInput:hover {
  cursor: var(--salt-selectable-cursor-hover);
}

/* Styles applied to root component on hover state if `disabled={true}` */
.saltTokenizedInput.saltTokenizedInput-disabled:hover {
  cursor: var(--salt-selectable-cursor-disabled);
}

/* Styles applied to container of pills */
.saltTokenizedInput-pillGroup {
  align-content: flex-start;
  display: flex;
  flex: 1;
  flex-wrap: wrap;
  min-height: var(--tokenizedInput-height);
  padding: var(--tokenizedInput-pill-group-y-padding) var(--tokenizedInput-spacing);
}

/* Styles applied to root component if `disabled={true}` */
.saltTokenizedInput-disabled {
  cursor: var(--salt-editable-cursor-disabled);
  opacity: var(--saltTokenizedInput-disabled-opacity, var(--salt-palette-opacity-foreground));
}

/* Styles applied to root component if `focused={true}` */
.saltTokenizedInput-focused {
  outline: var(--saltTokenizedInput-focused-outline, var(--salt-focused-outline));
}

/* Styles applied to root component if `expanded={true}` */
.saltTokenizedInput-expanded {
  height: auto;

  /* Pill CSS API */
  --saltPill-maxWidth: calc(100px - var(--salt-size-unit));
}

/* Styles applied to Input and Clear Button if `expanded={false}` */
.saltTokenizedInput-hidden,
.saltTokenizedInput-input.saltTokenizedInput-hidden,
.saltButton.saltTokenizedInput-hidden {
  display: none;
}

/**
  Styles applied to inner Input component
  Used to be .inputRoot
**/
.saltInputLegacy.saltTokenizedInput-input {
  align-items: flex-start;
  cursor: text;
  flex-grow: 1;
  padding: 0;
  outline: none;
  width: auto;
  height: auto;
  min-width: 0;
  min-height: 0;
}

/* Styles applied to Clear Button  */
.saltTokenizedInput-clearButton {
  flex: none;
  align-self: flex-end;
}

/* Styles applied to Expand Button  */
.saltTokenizedInput-expandButton {
  padding: 0 calc(var(--tokenizedInput-spacing) / 4);
}

/* Styles applied to root component and pill container if `expanded={true}` */
.saltTokenizedInput-expanded,
.saltTokenizedInput-expanded .saltTokenizedInput-pillGroup {
  height: auto;
}

/* TODO: Adjust specificity of .InputPill depending on styling solution.
  This is an example of internal sub-component naming convension. */
.saltTokenizedInput .saltInputPill,
.saltTokenizedInput-expandButton,
.saltInputLegacy.saltTokenizedInput-input,
.saltTokenizedInput-inputField.saltTokenizedInput-inputMultiline .saltTokenizedInput-input {
  margin: calc(var(--tokenizedInput-gutter-size) / 2) 0;
  height: calc(var(--tokenizedInput-height) - var(--tokenizedInput-spacing) * 1.5);
}

/* Styles applied to inner Pills */
.saltTokenizedInput .saltInputPill {
  min-width: 0;
  margin-right: var(--tokenizedInput-gutter-size);
  --saltPill-maxWidth: 100px;
}

.saltTokenizedInput .saltInputPill > * {
  min-width: 0;
}

/* Styles applied to a Pill if `expanded={false} && index >= firstHiddenIndex` */
.saltTokenizedInput .saltInputPill.saltInputPill-hidden {
  display: none;
}

/* Styles applied to the last visible Pill when all visible */
.saltTokenizedInput .saltInputPill-pillLastVisible {
  margin-right: var(--saltTokenizedInput-pill-last-visible-marginRight, var(--tokenizedInput-last-pill-margin));
}

/* Styles applied to a Pill when active */
.saltTokenizedInput .saltInputPill-pillActive {
  background: var(--saltTokenizedInput-pill-background-active, var(--salt-selectable-background-hover));
}

/* Styles applied to a Pills delete icon */
.saltTokenizedInput .saltInputPill-pillActive .saltPill-deleteIcon {
  color: var(--saltTokenizedInput-pill-delete-icon-color, var(--salt-actionable-cta-foreground-hover));
}

/* Styles applied to a Pills delete button */
.saltTokenizedInput .saltInputPill-pillActive .saltPill-deleteButton {
  color: var(--saltTokenizedInput-pill-delete-button-color-active, var(--salt-actionable-cta-foreground-hover));
  background: var(--saltTokenizedInput-pill-delete-button-background-active, var(--salt-actionable-cta-background-hover));
}
