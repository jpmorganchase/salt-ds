import { ColorPicker, Color } from "../../../color-chooser";
import { render, fireEvent } from "@testing-library/react";

const color = Color.makeColorFromHex("#D1F4C9");
HTMLCanvasElement.prototype.getContext = jest.fn();

describe("ColorPicker", () => {
  const changeSpy = jest.fn();
  const onDialogClosedSpy = jest.fn();
  afterEach(() => {
    jest.clearAllMocks();
  });

  it("ColorPicker renders correctly", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(element.getByTestId("color-picker")).toBeInTheDocument();
  });

  it("ColorPicker should default RGB to 0 and A to 1 if color and alpha props is undefined", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={undefined}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    const rgbaInput = element.getAllByDisplayValue("0")[0];
    fireEvent.change(rgbaInput, { target: { value: "100" } });
    fireEvent.keyDown(rgbaInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 1, _b: 0, _g: 0, _r: 100 }) },
      false,
      expect.anything()
    );

    element.rerender(
      <ColorPicker
        disableAlphaChooser={false}
        color={undefined}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    const gInput = element.getAllByDisplayValue("0")[1];
    fireEvent.change(gInput, { target: { value: "100" } });
    fireEvent.keyDown(gInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 1, _b: 0, _g: 100, _r: 0 }) },
      false,
      expect.anything()
    );
  });

  it("ColorPicker should default RGB to 0 and A to alpha props if color props is undefined", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={undefined}
        alpha={0.5}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    const rInput = element.getAllByDisplayValue("0")[0];
    fireEvent.change(rInput, { target: { value: "100" } });
    fireEvent.keyDown(rInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 0.5, _b: 0, _g: 0, _r: 100 }) },
      false,
      expect.anything()
    );
  });

  it("ColorPicker does not have an alpha input box if disableAlphaChooser is true", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={true}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(element.queryByTestId("a-input")).not.toBeInTheDocument();
  });

  it("ColorPicker should display the hex input without alpha if disableAlphaChooser is true", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={true}
        color={Color.makeColorFromHex("#70C77F")}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(element.queryAllByRole("textbox")[0]).toHaveValue("70C77F");

    const element2 = render(
      <ColorPicker
        disableAlphaChooser={true}
        color={Color.makeColorFromHex("#70C77F")?.setAlpha(0.4)}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(element2.queryAllByRole("textbox")[0]).toHaveValue("70C77F");
  });

  it("ColorPicker should not allow you to enter an 8 digit hex if disableAlphaChooser is true", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={true}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    const hexInput = element.getAllByDisplayValue("D1F4C9")[0];
    fireEvent.change(hexInput, { target: { value: "D1F4C980" } });
    fireEvent.keyDown(hexInput, { key: "Enter", code: "Enter" });
    expect(element.getAllByDisplayValue("D1F4C9")[0]).toBeInTheDocument();
    expect(changeSpy).not.toHaveBeenCalled();
  });

  it("ColorPicker should allow you to enter an 6 digit hex if disableAlphaChooser is true", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={true}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    const hexInput = element.getAllByDisplayValue("D1F4C9")[0];
    fireEvent.change(hexInput, { target: { value: "D1F4C4" } });
    fireEvent.keyDown(hexInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 1, _b: 196, _g: 244, _r: 209 }) },
      false,
      expect.anything()
    );
  });

  it("ColorPicker does have an alpha input box if disableAlphaChooser is false", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(element.queryByTestId("a-input")).toBeInTheDocument();
  });

  it("ColorPicker should default alpha channel to 1 if user enters 6 digit hex value and alpha is enabled", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(changeSpy).toHaveBeenCalledTimes(0);
    const hexInput = element.getAllByDisplayValue("D1F4C9")[0];
    fireEvent.change(hexInput, { target: { value: "D1F4C3" } });
    fireEvent.keyDown(hexInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 1, _b: 195, _g: 244, _r: 209 }) },
      false,
      expect.anything()
    );
  });

  it("ColorPicker reacts to users typing different RGB values and pressing Enter correctly", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(changeSpy).toHaveBeenCalledTimes(0);
    const rgbInput = element.getAllByDisplayValue("209")[0];
    fireEvent.change(rgbInput, { target: { value: "24" } });
    fireEvent.keyDown(rgbInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 1, _b: 201, _g: 244, _r: 24 }) },
      false,
      expect.anything()
    );
  });

  it("ColorPicker reacts to users typing different alpha values and pressing Tab correctly", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(changeSpy).toHaveBeenCalledTimes(0);
    const alphaInput = element.getAllByDisplayValue("1")[0];
    fireEvent.change(alphaInput, { target: { value: "0.4" } });
    fireEvent.blur(alphaInput);
    expect(changeSpy).toHaveBeenCalledWith(
      {
        color: expect.objectContaining({ _a: 0.4, _b: 201, _g: 244, _r: 209 }),
      },
      false,
      expect.anything()
    );
  });

  it("ColorPicker should not allow non numeric RGB inputs", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(changeSpy).toHaveBeenCalledTimes(0);
    const rgbaInput = element.getAllByDisplayValue("209")[0];
    fireEvent.change(rgbaInput, { target: { value: "ajwke" } });
    fireEvent.keyDown(rgbaInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).not.toHaveBeenCalled();
  });

  it("ColorPicker should default to 255 if users enter RGBA values above 255", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(changeSpy).toHaveBeenCalledTimes(0);
    const rgbaInput = element.getAllByDisplayValue("209")[0];
    fireEvent.change(rgbaInput, { target: { value: "289" } });
    fireEvent.keyDown(rgbaInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 1, _b: 201, _g: 244, _r: 255 }) },
      false,
      expect.anything()
    );
  });

  it("ColorPicker should default to 0 if users enter RGBA values below 0", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(changeSpy).toHaveBeenCalledTimes(0);
    const rgbaInput = element.getAllByDisplayValue("209")[0];
    fireEvent.change(rgbaInput, { target: { value: "-3" } });
    fireEvent.keyDown(rgbaInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 1, _b: 201, _g: 244, _r: 0 }) },
      false,
      expect.anything()
    );
  });

  it("ColorPicker should not allow users to enter incorrect hex values", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(changeSpy).toHaveBeenCalledTimes(0);
    const hexInput = element.getAllByDisplayValue("D1F4C9")[0];
    fireEvent.change(hexInput, { target: { value: "D1F4" } });
    fireEvent.keyDown(hexInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).not.toHaveBeenCalled();
  });

  it("ColorPicker should only show alpha value to 2 decimal places", () => {
    const color = Color.makeColorFromHex("#D1F4C96B");
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(changeSpy).toHaveBeenCalledTimes(0);
    const alphaInput = element.getAllByDisplayValue("0.42")[0];
    expect(alphaInput).toBeInTheDocument();
  });

  it("Allows a new alpha input starting with .", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(changeSpy).toHaveBeenCalledTimes(0);
    const alphaInput = element.getAllByDisplayValue("1")[0];
    fireEvent.change(alphaInput, { target: { value: ".34" } });
    fireEvent.blur(alphaInput);
    expect(element.queryByDisplayValue("1")).not.toBeInTheDocument();
  });

  it("Alpha input should allow a value of 0", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    expect(changeSpy).toHaveBeenCalledTimes(0);
    const alphaInput = element.getAllByDisplayValue("1")[0];
    fireEvent.change(alphaInput, { target: { value: "0" } });
    fireEvent.keyDown(alphaInput, { key: "Enter" });
    expect(alphaInput).toHaveValue("0");
  });

  it("Calculates alpha correctly if 8 digit hex is entered", async () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    const hexInput = element.queryAllByRole("textbox")[5];
    expect(hexInput).toHaveValue("D1F4C9");
    fireEvent.change(hexInput, { target: { value: "D1F4C94D" } });
    fireEvent.blur(hexInput);
    expect(element.queryAllByRole("textbox")[5]).toHaveValue("D1F4C94D");
  });

  it("alpha input should default to 0 if users enter alpha values below 0", async () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    const alphaInput = element.getAllByDisplayValue("1")[0];
    fireEvent.change(alphaInput, { target: { value: "-2" } });
    fireEvent.blur(alphaInput);
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 0, _b: 201, _r: 209, _g: 244 }) },
      false,
      expect.anything()
    );
  });

  it("alpha input should default to 1 if users enter alpha values above 1", async () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    const alphaInput = element.getAllByDisplayValue("1")[0];
    fireEvent.change(alphaInput, { target: { value: "6" } });
    fireEvent.keyDown(alphaInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenCalledWith(
      {
        color: expect.objectContaining({
          _a: 1,
          _b: 201,
          _r: 209,
          _g: 244,
        }),
      },
      false,
      undefined
    );
  });

  it("Overlay should close when Apply button is pressed", () => {
    const element = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    const rgbaInput = element.getAllByDisplayValue("209")[0];
    fireEvent.change(rgbaInput, { target: { value: "24" } });
    fireEvent.keyDown(rgbaInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenNthCalledWith(
      1,
      { color: expect.objectContaining({ _a: 1, _b: 201, _r: 24, _g: 244 }) },
      false,
      expect.anything()
    );
    const applyButton = element.getByTestId("apply-button");
    fireEvent.click(applyButton);
    expect(onDialogClosedSpy).toHaveBeenCalled();
  });
  it("onChange should fire with the current color and finalSelection = true when Apply button is pressed", () => {
    const { getAllByDisplayValue, rerender, getByTestId } = render(
      <ColorPicker
        disableAlphaChooser={false}
        color={color}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    const rgbaInput = getAllByDisplayValue("209")[0];
    fireEvent.change(rgbaInput, { target: { value: "24" } });
    fireEvent.keyDown(rgbaInput, { key: "Enter", code: "Enter" });
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 1, _b: 201, _r: 24, _g: 244 }) },
      false,
      expect.anything()
    );
    const newColor = Color.makeColorFromRGB(24, 244, 201, 1);
    rerender(
      <ColorPicker
        disableAlphaChooser={false}
        color={newColor}
        onChange={changeSpy}
        onDialogClosed={onDialogClosedSpy}
      />
    );
    changeSpy.mockClear();
    const applyButton = getByTestId("apply-button");
    fireEvent.click(applyButton);
    expect(changeSpy).toHaveBeenCalledWith(
      { color: expect.objectContaining({ _a: 1, _b: 201, _r: 24, _g: 244 }) },
      true
    );
  });
});
