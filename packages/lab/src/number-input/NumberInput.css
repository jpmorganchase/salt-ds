/* Styles applied to number container */
.saltNumberInput {
  --numberInput-border: var(--salt-size-fixed-100) var(--salt-borderStyle-solid) var(--numberInput-borderColor);
  --numberInput-borderColor: var(--salt-editable-borderColor);
  --numberInput-borderStyle: var(--salt-borderStyle-solid);
  --numberInput-outlineColor: var(--salt-focused-outlineColor);
  --numberInput-borderWidth: var(--salt-size-fixed-100);
  --numberInput-outline: none;

  align-items: center;
  background: var(--numberInput-background);
  border-radius: var(--salt-palette-corner-weak, 0);
  box-sizing: border-box;
  color: var(--salt-content-primary-foreground);
  display: inline-flex;
  font-family: var(--salt-text-fontFamily);
  font-size: var(--salt-text-fontSize);
  gap: var(--salt-spacing-50);
  height: var(--salt-size-base);
  min-height: var(--salt-size-base);
  min-width: 4em;
  overflow: hidden;
  outline: var(--numberInput-outline);
  padding-left: var(--salt-spacing-100);
  padding-right: var(--salt-spacing-50);
  padding-top: var(--salt-spacing-50);
  padding-bottom: var(--salt-spacing-50);
  position: relative;
  width: 100%;
}

.saltNumberInput:hover {
  --numberInput-borderStyle: var(--salt-borderStyle-solid);
  --numberInput-borderColor: var(--salt-editable-borderColor-hover);

  background: var(--numberInput-background-hover);
  cursor: var(--salt-cursor-text);
}

.saltNumberInput:active {
  --numberInput-borderColor: var(--salt-editable-borderColor-active);
  --numberInput-borderStyle: var(--salt-borderStyle-solid);
  --numberInput-borderWidth: var(--salt-size-fixed-200);

  background: var(--numberInput-background-active);
}

/* Class applied if `variant="primary"` */
.saltNumberInput-primary {
  --numberInput-background: var(--salt-editable-primary-background);
  --numberInput-background-active: var(--salt-editable-primary-background-active);
  --numberInput-background-hover: var(--salt-editable-primary-background-hover);
  --numberInput-background-disabled: var(--salt-editable-primary-background-disabled);
  --numberInput-background-readonly: var(--salt-editable-primary-background-readonly);
}

/* Class applied if `variant="secondary"` */
.saltNumberInput-secondary {
  --numberInput-background: var(--salt-editable-secondary-background);
  --numberInput-background-active: var(--salt-editable-secondary-background-active);
  --numberInput-background-hover: var(--salt-editable-secondary-background-active);
  --numberInput-background-disabled: var(--salt-editable-secondary-background-disabled);
  --numberInput-background-readonly: var(--salt-editable-secondary-background-readonly);
}

/* Style applied to input if `validationState="error"` */
.saltNumberInput-error,
.saltNumberInput-error:hover {
  --numberInput-background: var(--salt-status-error-background);
  --numberInput-background-active: var(--salt-status-error-background);
  --numberInput-background-hover: var(--salt-status-error-background);
  --numberInput-borderColor: var(--salt-status-error-borderColor);
  --numberInput-outlineColor: var(--salt-status-error-borderColor);
  --numberInput-background-readonly: var(--salt-status-error-background);
}

/* Style applied to input if `validationState="warning"` */
.saltNumberInput-warning,
.saltNumberInput-warning:hover {
  --numberInput-background: var(--salt-status-warning-background);
  --numberInput-background-active: var(--salt-status-warning-background);
  --numberInput-background-hover: var(--salt-status-warning-background);
  --numberInput-borderColor: var(--salt-status-warning-borderColor);
  --numberInput-outlineColor: var(--salt-status-warning-borderColor);
  --numberInput-background-readonly: var(--salt-status-warning-background);
}

/* Style applied to input if `validationState="success"` */
.saltNumberInput-success,
.saltNumberInput-success:hover {
  --numberInput-background: var(--salt-status-success-background);
  --numberInput-background-active: var(--salt-status-success-background);
  --numberInput-background-hover: var(--salt-status-success-background);
  --numberInput-borderColor: var(--salt-status-success-borderColor);
  --numberInput-outlineColor: var(--salt-status-success-borderColor);
  --numberInput-background-readonly: var(--salt-status-success-background);
}

/* Style applied to inner input component */
.saltNumberInput-input {
  background: none;
  border: none;
  box-sizing: content-box;
  color: inherit;
  cursor: inherit;
  display: block;
  flex: 1;
  font: inherit;
  letter-spacing: var(--salt-text-letterSpacing);
  line-height: var(--salt-text-lineHeight);
  margin: 0;
  min-width: 0;
  padding: 0;
  text-align: var(--numberInput-textAlign);
  width: 100%;
}

.saltNumberInput-input:focus {
  outline: none;
}

/* Style applied to placeholder text */
.saltNumberInput-input::placeholder {
  color: var(--salt-content-secondary-foreground);
  font-weight: var(--salt-text-fontWeight-small);
}

/* Styling when focused */
.saltNumberInput-focused {
  --numberInput-borderColor: var(--numberInput-outlineColor);
  --numberInput-borderWidth: var(--salt-size-fixed-200);

  outline: var(--saltNumberInput-outline, var(--salt-focused-outlineWidth) var(--salt-focused-outlineStyle) var(--numberInput-outlineColor));
}

/* Style applied if `bordered={true}` */
.saltNumberInput-bordered {
  --numberInput-border: var(--salt-size-fixed-100) var(--salt-borderStyle-solid) var(--numberInput-borderColor);
  --numberInput-borderWidth: 0;

  border: var(--numberInput-border);
}

/* Style applied if focused or active when `bordered={true}` */
.saltNumberInput-bordered.saltNumberInput-focused,
.saltNumberInput-bordered:active {
  --numberInput-borderWidth: var(--salt-size-fixed-200);
}

/* Styling when focused if `disabled={true}` or `readOnly={true}` when `bordered={true}` */
.saltNumberInput-bordered.saltNumberInput-readOnly,
.saltNumberInput-bordered.saltNumberInput-disabled:hover {
  --numberInput-borderWidth: 0;
}

/* Styling when focused and hovered when `bordered={true}` */
.saltNumberInput-bordered.saltNumberInput-focused:hover {
  --numberInput-borderColor: var(--salt-editable-borderColor-active);
}

/* Style applied if `readOnly={true}` */
.saltNumberInput-readOnly,
.saltNumberInput-bordered.saltNumberInput-readOnly {
  --numberInput-borderColor: var(--salt-editable-borderColor-readonly);
  --numberInput-borderStyle: var(--salt-borderStyle-solid);
  --numberInput-borderWidth: var(--salt-size-fixed-100);

  background: var(--numberInput-background-readonly);
  cursor: var(--salt-cursor-readonly);
}

/* Styling when focused if `disabled={true}` */
.saltNumberInput-focused.saltNumberInput-disabled {
  --numberInput-borderWidth: var(--salt-size-fixed-100);
  outline: none;
}

/* Styling when focused if `readOnly={true}` */
.saltNumberInput-focused.saltNumberInput-readOnly {
  --numberInput-borderWidth: var(--salt-size-fixed-100);
}

.saltNumberInput:hover.saltNumberInput-readOnly {
  --numberInput-borderColor: var(--salt-editable-borderColor-readonly);
}

/* Style applied to selected input if `disabled={true}` */
.saltNumberInput-disabled .saltNumberInput-input::selection {
  background: none;
}

/* Style applied to input if `disabled={true}` */
.saltNumberInput-disabled,
.saltNumberInput-disabled:hover,
.saltNumberInput-disabled:active {
  --numberInput-borderColor: var(--salt-editable-borderColor-disabled);
  --numberInput-borderStyle: var(--salt-borderStyle-solid);
  --numberInput-borderWidth: var(--salt-size-fixed-100);

  background: var(--numberInput-background-disabled);
  cursor: var(--salt-cursor-disabled);
  color: var(--saltNumberInput-color-disabled, var(--salt-content-primary-foreground-disabled));
}

/* Style applied to start adornments */
.saltNumberInput-startAdornmentContainer {
  align-items: center;
  display: inline-flex;
  padding-right: var(--salt-spacing-100);
  column-gap: var(--salt-spacing-100);
}

/* Style applied to end adornments */
.saltNumberInput-endAdornmentContainer {
  align-items: center;
  display: inline-flex;
  padding-left: var(--salt-spacing-100);
  column-gap: var(--salt-spacing-100);
}

.saltNumberInput-startAdornmentContainer {
  margin-left: calc(var(--salt-spacing-50) * -1);
}

.saltNumberInput-startAdornmentContainer > .saltButton,
.saltNumberInput-endAdornmentContainer > .saltButton {
  --saltButton-padding: calc(var(--salt-spacing-50) - var(--button-borderWidth));
  --saltButton-height: calc(var(--salt-size-base) - var(--salt-spacing-100));
  --saltButton-borderRadius: var(--salt-palette-corner-weaker);
}

.saltNumberInput-inputTextAlignLeft {
  --numberInput-textAlign: left;
}

.saltNumberInput-inputTextAlignCenter {
  --numberInput-textAlign: center;
}

.saltNumberInput-inputTextAlignRight {
  --numberInput-textAlign: right;
}

/* --- Buttons --- */

/* Styles applied to number buttons container */
.saltNumberInput-buttonContainer {
  --numberInput-buttonGap: var(--salt-spacing-fixed-200);
  display: flex;
  flex-direction: column;
  gap: var(--numberInput-buttonGap);
  justify-content: center;
  cursor: var(--salt-cursor-disabled);
}

.saltNumberInput-hiddenButtons .saltNumberInput-buttonContainer {
  display: none;
}

.saltNumberInput-activationIndicator {
  left: 0;
  bottom: 0;
  width: 100%;
  position: absolute;
  border-bottom: var(--salt-size-fixed-100) var(--salt-borderStyle-solid) var(--numberInput-borderColor);
}

.saltNumberInput-focused .saltNumberInput-activationIndicator {
  border-bottom: var(--salt-size-fixed-200) var(--salt-borderStyle-solid) var(--salt-editable-borderColor-active);
}

.saltNumberInput-bordered.saltNumberInput-focused .saltNumberInput-activationIndicator {
  /* Activation indicator width minus the border from the number input. */
  border-bottom-width: var(--salt-size-fixed-100);
}

.saltNumberInput-bordered .saltNumberInput-activationIndicator,
.saltNumberInput-readOnly.saltNumberInput-focused .saltNumberInput-activationIndicator {
  border-bottom-width: 0;
}

/* Styles applied to number buttons */
.saltNumberInput-decrement {
  --saltButton-height: calc((var(--salt-size-base) - (var(--salt-spacing-50) * 2) - var(--salt-size-fixed-200)) / 2);
  --saltButton-padding: calc(var(--salt-spacing-50) - var(--button-borderWidth));
  --saltButton-borderRadius: 0 0 var(--salt-palette-corner-weaker, 0) var(--salt-palette-corner-weaker, 0);
}
.saltNumberInput-decrement:disabled {
  pointer-events: none;
}
.saltNumberInput-increment {
  --saltButton-height: calc((var(--salt-size-base) - (var(--salt-spacing-50) * 2) - var(--salt-size-fixed-200)) / 2);
  --saltButton-padding: calc(var(--salt-spacing-50) - var(--button-borderWidth));
  --saltButton-borderRadius: var(--salt-palette-corner-weaker, 0) var(--salt-palette-corner-weaker, 0) 0 0;
}
.saltNumberInput-increment:disabled {
  pointer-events: none;
}
