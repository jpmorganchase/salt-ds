/* Style applied to the root element */
.saltMultilineInput {
  display: inline-grid;
  grid-template-areas: "start-adornment textarea end-adornment";
  grid-template-columns: min-content 1fr min-content;
  grid-template-rows: 1fr;
  background: var(--multilineInput-background);
  border-radius: var(--salt-palette-corner-weak, 0);
  color: var(--salt-content-primary-foreground);
  font-family: var(--salt-text-fontFamily);
  font-size: var(--salt-text-fontSize);
  line-height: var(--salt-text-lineHeight);
  letter-spacing: var(--salt-text-letterSpacing);
  min-height: var(--salt-size-base);
  min-width: 4em;
  position: relative;
  width: 100%;
  box-sizing: border-box;
  overflow: hidden;
  padding: 0 var(--salt-spacing-100);
}

.saltMultilineInput-wrapper {
  grid-area: textarea;
  overflow: hidden;
  margin: var(--salt-spacing-75) 0;
  display: flex;
}

/* Style applied on hover */
.saltMultilineInput:hover {
  background: var(--multilineInput-background-hover);
  cursor: var(--salt-cursor-text);
}

/* Style applied if `bordered={true}` */
.saltMultilineInput-bordered.saltMultilineInput {
  border: var(--salt-size-fixed-100) var(--salt-borderStyle-solid) var(--multilineInput-borderColor);
}

.saltMultilineInput-bordered.saltMultilineInput:hover {
  border-style: var(--salt-borderStyle-solid);
  border-color: var(--multilineInput-borderColor-hover);
}

/* Style applied if focused or active when `bordered={true}` */
.saltMultilineInput-bordered.saltMultilineInput-focused,
.saltMultilineInput-bordered.saltMultilineInput-focused:hover {
  border-style: var(--salt-borderStyle-solid);
  border-color: var(--multilineInput-borderColor-active);
}

/* Styling when focused if `disabled={true}` or `readOnly={true}` when `bordered={true}` */
.saltMultilineInput-bordered.saltMultilineInput-readOnly,
.saltMultilineInput-bordered.saltMultilineInput-readOnly:hover {
  border-style: var(--salt-borderStyle-solid);
  border-color: var(--salt-editable-borderColor-readonly);
}

.saltMultilineInput-bordered.saltMultilineInput-disabled,
.saltMultilineInput-bordered.saltMultilineInput-disabled:hover {
  border-style: var(--salt-borderStyle-solid);
  border-color: var(--salt-editable-borderColor-disabled);
}

/* Style for activation indicator */
.saltMultilineInput-activationIndicator {
  left: 0;
  bottom: 0;
  width: 100%;
  position: absolute;
  border-bottom: var(--salt-size-fixed-100) var(--salt-borderStyle-solid) var(--multilineInput-borderColor);
}

.saltMultilineInput:hover .saltMultilineInput-activationIndicator {
  border-bottom-style: var(--salt-borderStyle-solid);
  border-bottom-color: var(--multilineInput-borderColor-hover);
}

.saltMultilineInput-focused .saltMultilineInput-activationIndicator,
.saltMultilineInput-focused:hover .saltMultilineInput-activationIndicator {
  border-bottom: var(--salt-size-fixed-200) var(--salt-borderStyle-solid) var(--multilineInput-borderColor-active);
}

.saltMultilineInput-readOnly .saltMultilineInput-activationIndicator,
.saltMultilineInput-readOnly:hover .saltMultilineInput-activationIndicator {
  border-bottom-style: var(--salt-borderStyle-solid);
  border-bottom-color: var(--salt-editable-borderColor-readonly);
}

.saltMultilineInput-disabled .saltMultilineInput-activationIndicator,
.saltMultilineInput-disabled:hover .saltMultilineInput-activationIndicator {
  border-bottom-style: var(--salt-borderStyle-solid);
  border-bottom-color: var(--salt-editable-borderColor-disabled);
}

.saltMultilineInput-bordered .saltMultilineInput-activationIndicator,
.saltMultilineInput-bordered.saltMultilineInput-readOnly .saltMultilineInput-activationIndicator,
.saltMultilineInput-bordered.saltMultilineInput-disabled:hover .saltMultilineInput-activationIndicator {
  border-bottom-width: 0;
}

.saltMultilineInput-bordered.saltMultilineInput-focused .saltMultilineInput-activationIndicator {
  /* Activation indicator width minus the border from the input. */
  border-bottom-width: var(--salt-size-fixed-100);
}

/* Class applied if `variant="primary"` */
.saltMultilineInput-primary {
  --multilineInput-background: var(--salt-editable-primary-background);
  --multilineInput-background-active: var(--salt-editable-primary-background-active);
  --multilineInput-background-hover: var(--salt-editable-primary-background-hover);
  --multilineInput-background-disabled: var(--salt-editable-primary-background-disabled);
  --multilineInput-background-readonly: var(--salt-editable-primary-background-readonly);
  --multilineInput-borderColor: var(--salt-editable-borderColor);
  --multilineInput-borderColor-active: var(--salt-editable-borderColor-active);
  --multilineInput-borderColor-hover: var(--salt-editable-borderColor-hover);
  --multilineInput-outlineColor: var(--salt-focused-outlineColor);
}

/* Class applied if `variant="secondary"` */
.saltMultilineInput-secondary {
  --multilineInput-background: var(--salt-editable-secondary-background);
  --multilineInput-background-active: var(--salt-editable-secondary-background-active);
  --multilineInput-background-hover: var(--salt-editable-secondary-background-active);
  --multilineInput-background-disabled: var(--salt-editable-secondary-background-disabled);
  --multilineInput-background-readonly: var(--salt-editable-secondary-background-readonly);
  --multilineInput-borderColor: var(--salt-editable-borderColor);
  --multilineInput-borderColor-active: var(--salt-editable-borderColor-active);
  --multilineInput-borderColor-hover: var(--salt-editable-borderColor-hover);
  --multilineInput-outlineColor: var(--salt-focused-outlineColor);
}

/* Style applied to input if `validationState="error"` */
.saltMultilineInput-error {
  --multilineInput-background: var(--salt-status-error-background);
  --multilineInput-background-active: var(--salt-status-error-background);
  --multilineInput-background-hover: var(--salt-status-error-background);
  --multilineInput-background-readonly: var(--salt-status-error-background);
  --multilineInput-borderColor: var(--salt-status-error-borderColor);
  --multilineInput-borderColor-active: var(--salt-status-error-borderColor);
  --multilineInput-borderColor-hover: var(--salt-status-error-borderColor);
  --multilineInput-outlineColor: var(--salt-status-error-borderColor);
}

/* Style applied to input if `validationState="warning"` */
.saltMultilineInput-warning {
  --multilineInput-background: var(--salt-status-warning-background);
  --multilineInput-background-active: var(--salt-status-warning-background);
  --multilineInput-background-hover: var(--salt-status-warning-background);
  --multilineInput-background-readonly: var(--salt-status-warning-background);
  --multilineInput-borderColor: var(--salt-status-warning-borderColor);
  --multilineInput-borderColor-active: var(--salt-status-warning-borderColor);
  --multilineInput-borderColor-hover: var(--salt-status-warning-borderColor);
  --multilineInput-outlineColor: var(--salt-status-warning-borderColor);
}

/* Style applied to input if `validationState="success"` */
.saltMultilineInput-success {
  --multilineInput-background: var(--salt-status-success-background);
  --multilineInput-background-active: var(--salt-status-success-background);
  --multilineInput-background-hover: var(--salt-status-success-background);
  --multilineInput-background-readonly: var(--salt-status-success-background);
  --multilineInput-borderColor: var(--salt-status-success-borderColor);
  --multilineInput-borderColor-active: var(--salt-status-success-borderColor);
  --multilineInput-borderColor-hover: var(--salt-status-success-borderColor);
  --multilineInput-outlineColor: var(--salt-status-success-borderColor);
}

/* Styling when focused */
.saltMultilineInput-focused,
.saltMultilineInput-focused:hover {
  background: var(--multilineInput-background-active);
  cursor: var(--salt-cursor-text);
  outline: var(--salt-focused-outlineWidth) var(--salt-focused-outlineStyle) var(--multilineInput-outlineColor);
}

/* Style applied if `readOnly={true}` */
.saltMultilineInput.saltMultilineInput-readOnly {
  background: var(--multilineInput-background-readonly);
  cursor: var(--salt-cursor-readonly);
}

/* Style applied to input if `disabled={true}` */
.saltMultilineInput.saltMultilineInput-disabled,
.saltMultilineInput.saltMultilineInput-disabled:hover {
  background: var(--input-background-disabled);
  cursor: var(--salt-cursor-disabled);
  color: var(--salt-content-primary-foreground-disabled);
}

.saltMultilineInput.saltMultilineInput-withAdornmentRow {
  grid-template-areas: "start-adornment textarea" "end-adornment end-adornment";
  grid-template-columns: min-content 1fr;
  grid-template-rows: 1fr auto;
}

/* Style applied to adornment containers */
.saltMultilineInput-endAdornmentContainer,
.saltMultilineInput-startAdornmentContainer {
  align-items: center;
  display: inline-flex;
  min-height: var(--salt-size-base);
  column-gap: var(--salt-spacing-100);
}

/* Style applied to start adornment container */
.saltMultilineInput-startAdornmentContainer {
  align-self: self-start;
  padding-right: var(--salt-spacing-100);
  grid-area: start-adornment;
}

/* Style applied to suffix adornment container */
.saltMultilineInput-suffixAdornments {
  align-self: self-end;
  grid-area: end-adornment;
}

/* Style applied to suffix adornment container when end adornments are provided */
.saltMultilineInput-withAdornmentRow .saltMultilineInput-suffixAdornments {
  display: inline-flex;
  flex-basis: 100%;
  justify-content: flex-end;
}

/* Style applied to end adornment container */
.saltMultilineInput-endAdornmentContainer {
  padding-left: var(--salt-spacing-100);
}

/* Style applied to status adornment container */
.saltMultilineInput-statusAdornmentContainer {
  align-self: self-end;
  display: inline-flex;
  min-height: var(--salt-size-base);
}

/* Style applied to button start adornment if first child */
.saltMultilineInput-startAdornmentContainer .saltButton:first-child {
  margin-left: calc(var(--salt-spacing-50) * -1);
}

/* Style applied to button end adornment if last child */
.saltMultilineInput-endAdornmentContainer .saltButton:last-child {
  margin-right: calc(var(--salt-spacing-50) * -1);
}

/* Style applied to button end adornment if last child */
.saltMultilineInput-readOnly .saltMultilineInput-endAdornmentContainer .saltButton:last-child {
  margin-right: 0;
}

/* Styles for button adornment */
.saltMultilineInput-startAdornmentContainer > .saltButton,
.saltMultilineInput-endAdornmentContainer > .saltButton {
  --saltButton-padding: calc(var(--salt-spacing-50) - var(--button-borderWidth));
  --saltButton-height: calc(var(--salt-size-base) - var(--salt-spacing-100));
  --saltButton-borderRadius: var(--salt-palette-corner-weaker);
}

/* Style applied to inner textarea element */
.saltMultilineInput-textarea {
  appearance: none;
  background: none;
  border: 0;
  color: inherit;
  font: inherit;
  resize: vertical;
  width: 100%;
  padding: 0;
  box-sizing: border-box;
  min-height: 0;
  min-width: 0;
  max-height: 100%;
  overflow: auto;
}

/* Style applied to placeholder */
.saltMultilineInput-textarea::placeholder {
  font-weight: var(--salt-text-fontWeight-small);
}

/* Reset in the  class */
.saltMultilineInput-textarea:focus {
  outline: none;
}

/* Style applied to selected input */
.saltMultilineInput-textarea::selection {
  background: var(--salt-content-foreground-highlight);
}

/* Style applied to selected text if `disabled={true}` */
.saltMultilineInput-disabled .saltMultilineInput-textarea::selection {
  background: none;
}
